@ 메모리의 기본 구조

1) Data 영역
 - 정적변수, 전역변수 저장공간
 - 프로그램 시작시 생성, 끝날시 삭제
 
2) Stack 영역
 - 매개변수, 지역변수 저장공간
 - 함수 생성시 생성, 끝날 시 해제
 
3) Heap 영역
 - 동적할당 변수 저장공간
 - free 선언시 해제
 
 
@ void 포인터

 - 모든 자료형의 객체를 가르킬 수 있고, 모든 자료형의 포인터값을 대입할 수 있음.
 - 문제점?
 
 
@ 함수에서 const 매개변수 사용
 - 목적: 해당 포인터 배열에 쓰기 금지 읽기만 가능하게 설정하는 것.
 
@ 난수 발생법
 - 헤더 <stdlib.h> <time.h> 선언
 - srand(time(NULL)); 로 난수의 seed 초기화
 - rand() 로 난수 발생.
 
 - 난수의 범위 = stdlib.h 안의 RAND_MAX로 선언되어있음.
  
  @ seed 란?
   - 난수를 발생시키는 규칙의 변수.
   - seed가 난수가 되지 않는다면 계속 동일한 난수가 발생됨.
   - 이를 해결하기 위해 srand(time(NULL))을 사용. => 현재 시간을 seed로 입력.
   
  
